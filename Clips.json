{
  "clips": [
    {
      "content": "$AUTHOR_NAME",
      "name": "User Signature",
      "trigger": "usersig"
    },
    {
      "name": "Group Name",
      "children": [
        {
          "content": "import ${2:moduleName} from '${1:module}'$0",
          "name": "import",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imp"
        },
        {
          "content": "import '${1:module}'$0",
          "name": "importNoModuleName",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imn"
        },
        {
          "content": "import { $2 } from '${1:module}'$0",
          "name": "importDestructing",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imd"
        },
        {
          "content": "import * as ${2:alias} from '${1:module}'$0",
          "name": "importEverything",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ime"
        },
        {
          "content": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
          "name": "importAs",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ima"
        },
        {
          "content": "export default $1$0",
          "name": "exportDefault",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "exp"
        },
        {
          "content": "export { $2 } from '${1:module}'$0",
          "name": "exportDestructing",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "exd"
        },
        {
          "content": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
          "name": "exportAs",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "exa"
        },
        {
          "content": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}",
          "name": "exportNamedFunction",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "enf"
        },
        {
          "content": "export default (${1:params}) => {\t$0}",
          "name": "exportDefaultFunction",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "edf"
        },
        {
          "content": "${1:methodName} = (${2:params}) => {\n\t${0}\n}",
          "name": "method",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "met"
        },
        {
          "content": "get ${1:propertyName}() {\n\treturn this.${0}\n}",
          "name": "propertyGet",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pge"
        },
        {
          "content": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}",
          "name": "propertySet",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pse"
        },
        {
          "content": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
          "name": "forEach",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "fre"
        },
        {
          "content": "for(let ${1:item} of ${2:object}) {\n\t${0}\n}",
          "name": "forOf",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "fof"
        },
        {
          "content": "for(let ${1:item} in ${2:object}) {\n\t${0}\n}",
          "name": "forIn",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "fin"
        },
        {
          "content": "(${1:params}) => {\n\t${2}\n}",
          "name": "anonymousFunction",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "anfn"
        },
        {
          "content": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
          "name": "namedFunction",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "nfn"
        },
        {
          "content": "const {${1:propertyName}} = ${2:objectToDestruct}",
          "name": "destructingObject",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "dob"
        },
        {
          "content": "const [${1:propertyName}] = ${2:arrayToDestruct}",
          "name": "destructingArray",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "dar"
        },
        {
          "content": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
          "name": "setInterval",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "sti"
        },
        {
          "content": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
          "name": "setTimeOut",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "sto"
        },
        {
          "content": "return new Promise((resolve, reject) => {\n\t${1}\n})",
          "name": "promise",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "prom"
        },
        {
          "content": "console.assert(${1:expression}, ${2:object})",
          "name": "consoleAssert",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cas"
        },
        {
          "content": "console.clear()",
          "name": "consoleClear",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ccl"
        },
        {
          "content": "console.count(${1:label})",
          "name": "consoleCount",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cco"
        },
        {
          "content": "console.dir(${1:object})",
          "name": "consoleDir",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cdi"
        },
        {
          "content": "console.error(${1:object})",
          "name": "consoleError",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cer"
        },
        {
          "content": "console.group(\"${1:label}\")",
          "name": "consoleGroup",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cgr"
        },
        {
          "content": "console.groupEnd()",
          "name": "consoleGroupEnd",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cge"
        },
        {
          "content": "console.log(${1:object})",
          "name": "consoleLog",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "clg"
        },
        {
          "content": "console.trace(${1:object})",
          "name": "consoleTrace",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ctr"
        },
        {
          "content": "console.log('${1:object}', ${1:object})",
          "name": "consoleLogObject",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "clo"
        },
        {
          "content": "console.time('${1:object}')",
          "name": "consoleTime",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ctm"
        },
        {
          "content": "console.timeEnd('${1:object}')",
          "name": "consoleTimeEnd",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cte"
        },
        {
          "content": "console.warn(${1:object})",
          "name": "consoleWarn",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cwa"
        },
        {
          "content": "console.info(${1:object})",
          "name": "consoleInfo",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cin"
        },
        {
          "content": "const { $1 } = this.props",
          "name": "destructProps",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cp"
        },
        {
          "content": "const { $1 } = this.state",
          "name": "destructState",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cs"
        },
        {
          "content": "import React from 'react'",
          "name": "import React",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imr"
        },
        {
          "content": "import ReactDOM from 'react-dom'",
          "name": "import ReactDOM",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrd"
        },
        {
          "content": "import React, { Component } from 'react'",
          "name": "import React, { Component }",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrc"
        },
        {
          "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'",
          "name": "import React, { Component } & PropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrcp"
        },
        {
          "content": "import React, { PureComponent } from 'react'",
          "name": "import React, { PureComponent }",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrpc"
        },
        {
          "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'",
          "name": "import React, { PureComponent } & PropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrpcp"
        },
        {
          "content": "import React, { memo } from 'react'",
          "name": "import React, { memo }",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrm"
        },
        {
          "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'",
          "name": "import React, { memo } & PropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrmp"
        },
        {
          "content": "import React, { useState } from 'react'",
          "name": "import React, {useState}",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrs"
        },
        {
          "content": "import React, { useState, useEffect } from 'react'",
          "name": "import React, {useState, useEffect}",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrse"
        },
        {
          "content": "import PropTypes from 'prop-types'",
          "name": "import PropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "impt"
        },
        {
          "content": "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
          "name": "import React Router",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrr"
        },
        {
          "content": "import { BrowserRouter as Router } from 'react-router-dom'",
          "name": "import React Browser Router",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imbr"
        },
        {
          "content": "import { Route } from 'react-router-dom'",
          "name": "import React Browser Router - Route",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imbrr"
        },
        {
          "content": "import { Route, Switch, NavLink, Link } from 'react-router-dom'",
          "name": "import React Browser Router - Route Combo",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imbrc"
        },
        {
          "content": "import { Switch } from 'react-router-dom'",
          "name": "import React Browser Router - Switch",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imbrs"
        },
        {
          "content": "import { Link } from 'react-router-dom'",
          "name": "import React Browser Router - Link",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imbrl"
        },
        {
          "content": "import { NavLink } from 'react-router-dom'",
          "name": "import React Browser Router - NavLink",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imbrnl"
        },
        {
          "content": "import { connect } from 'react-redux'",
          "name": "import redux statement",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "redux"
        },
        {
          "content": "import React, { Component } from 'react'\nexport default class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t\n$0\t\t\t</div>\n\t\t)\n\t}}",
          "name": "reactClassCompoment",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rcc"
        },
        {
          "content": "import React, { Component } from 'react'\nexport class ${1:${TM_FILENAME_BASE}} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}\nexport default ${1:${TM_FILENAME_BASE}}",
          "name": "reactClassExportComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rce"
        },
        {
          "content": "import React from 'react'\nfunction ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}\n\nexport default ${1:${TM_FILENAME_BASE}}",
          "name": "reactFunctionalExportComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rfce"
        },
        {
          "content": "import React from 'react'\nexport default function ${1:${TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}",
          "name": "reactFunctionalComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rfc"
        },
        {
          "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ${1:${TM_FILENAME_BASE}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}\n\n${1:${TM_FILENAME_BASE}.propTypes = {}\n\nexport default ${1:${TM_FILENAME_BASE}",
          "name": "reactFunctionalComponentWithPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rfcp"
        },
        {
          "content": "import React from 'react'\nconst ${1:TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}\n\nexport default ${1:TM_FILENAME_BASE}",
          "name": "reactArrowFunctionExportComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rafce"
        },
        {
          "content": "import React from 'react'\nexport const ${1:$TM_FILENAME_BASE} = () => {\n\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}",
          "name": "reactArrowFunctionComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rafc"
        },
        {
          "content": "import React from 'react'\nimport PropTypes from 'prop-types'\nconst ${1:$TM_FILENAME_BASE} = props => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}\n${1:$TM_FILENAME_BASE}.propTypes = {}\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactArrowFunctionComponentWithPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rafcp"
        },
        {
          "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class ${1:$TM_FILENAME_BASE} extends Component {\n\tstatic propTypes = {\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}\n\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactClassExportComponentWithPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rcep"
        },
        {
          "content": "import React, { PureComponent } from 'react'\nexport default class ${1:$TM_FILENAME_BASE} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}",
          "name": "reactClassPureComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rpc"
        },
        {
          "content": "import React, { PureComponent } from 'react'\nexport class ${1:$TM_FILENAME_BASE} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactClassExportPureComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rpce"
        },
        {
          "content": "import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nexport default class ${1:$TM_FILENAME_BASE} extends PureComponent {\n\tstatic propTypes = {\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}",
          "name": "reactClassPureComponentWithPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rpcp"
        },
        {
          "content": "import React, { memo } from 'react'\nexport default memo(function ${1:$TM_FILENAME_BASE}() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})",
          "name": "reactFunctionMemoComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rmc"
        },
        {
          "content": "import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nconst ${1:$TM_FILENAME_BASE} = memo(function ${1:$TM_FILENAME_BASE}(props) {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n})\n${1:$TM_FILENAME_BASE}.propTypes = {}\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactFunctionMemoComponentWithPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rmcp"
        },
        {
          "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nexport default class ${1:$TM_FILENAME_BASE} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}",
          "name": "reactClassCompomentPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rccp"
        },
        {
          "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nexport class ${1:$TM_FILENAME_BASE} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}\nconst mapStateToProps = (state) => ({\n\t})\nconst mapDispatchToProps = {\n\t}\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})",
          "name": "reactClassCompomentRedux",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rcredux"
        },
        {
          "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nexport class ${1:$TM_FILENAME_BASE} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}}\nconst mapStateToProps = (state) => (\n{\t}\n)\nconst mapDispatchToProps = {\n\t}\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})",
          "name": "reactClassCompomentReduxPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rcreduxp"
        },
        {
          "content": "import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nexport const ${1:$TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}\nconst mapStateToProps = (state) => ({\n\t\n})\nconst mapDispatchToProps = {\n\t\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})",
          "name": "reactFunctionalCompomentRedux",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rfcredux"
        },
        {
          "content": "import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nexport const ${1:$TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}\n${1:$TM_FILENAME_BASE}.propTypes = {\n\t${2:prop}: ${3:PropTypes}\n}\nconst mapStateToProps = (state) => ({\n\t\n})\nconst mapDispatchToProps = {\n\t\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})",
          "name": "reactFunctionalCompomentReduxPropTypes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rfcreduxp"
        },
        {
          "content": "const mapStateToProps = (state) => ({\n\t${1}\n})\nconst mapDispatchToProps = {\t}",
          "name": "mappingToProps",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "reduxmap"
        },
        {
          "content": "constructor(props) {\n\tsuper(props)\n\tthis.state = {\n\t\t $0\n\t}}",
          "name": "classConstructor",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rconst"
        },
        {
          "content": "state = {\n\t$1\n}",
          "name": "emptyState",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "est"
        },
        {
          "content": "componentWillMount() {\n\t$0\n}",
          "name": "componentWillMount",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cwm"
        },
        {
          "content": "componentDidMount() {\n\t$0\n}",
          "name": "componentDidMount",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cdm"
        },
        {
          "content": "componentWillReceiveProps(nextProps) {\n\t$0\n}",
          "name": "componentWillReceiveProps",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cwr"
        },
        {
          "content": "shouldComponentUpdate(nextProps, nextState) {\n\t$0\n}",
          "name": "shouldComponentUpdate",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "scu"
        },
        {
          "content": "componentWillUpdate(nextProps, nextState) {\n\t$0\n}",
          "name": "componentWillUpdate",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cwup"
        },
        {
          "content": "componentDidUpdate(prevProps, prevState) {\n\t$0\n}",
          "name": "componentDidUpdate",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cdup"
        },
        {
          "content": "componentWillUnmount() {\n\t$0\n}",
          "name": "componentWillUnmount",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cwun"
        },
        {
          "content": "static getDerivedStateFromProps(props, state) {\n\t${1}\n}",
          "name": "getDerivedStateFromProps",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "gdsfp"
        },
        {
          "content": "getSnapshotBeforeUpdate = (prevProps, prevState) => {\n\t$0\n}",
          "name": "getSnapshotBeforeUpdate",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "gsbu"
        },
        {
          "content": "render() {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)}",
          "name": "componentRender",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ren"
        },
        {
          "content": "const ${1:contextName} = React.createContext()",
          "name": "createContext",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rcontext"
        },
        {
          "content": "this.${1:refName}Ref = React.createRef()",
          "name": "createRef",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cref"
        },
        {
          "content": "const ref = React.createRef()",
          "name": "forwardRef",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "fref"
        },
        {
          "content": "this.setState({$0})",
          "name": "componentSetStateObject",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "sst"
        },
        {
          "content": "this.setState((state, props) => {\n return {$0}\n})",
          "name": "componentSetStateFunc",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ssf"
        },
        {
          "content": "this.props.$0",
          "name": "componentProps",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "props"
        },
        {
          "content": "this.state.$0",
          "name": "componentState",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "state"
        },
        {
          "content": "this.${1:methodName} = this.${1:methodName}.bind(this)$0",
          "name": "bindThis",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "bnd"
        },
        {
          "content": "export const ${1:actionName} = (payload) => ({\n\ttype: ${3:type},\n\tpayload\n})",
          "name": "reduxAction",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rxaction"
        },
        {
          "content": "export const ${1:constantName} = '${1:constantName}'",
          "name": "reduxConst",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rxconst"
        },
        {
          "content": "const initialState = {}\nexport default (\nstate = initialState, { type, payload }) => {\n\tswitch (type) {\n\tcase ${1:typeName}:\n\t\treturn { ...state, ...payload }\n\tdefault:\n\t\treturn state\n\t}}",
          "name": "reduxReducer",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rxreducer"
        },
        {
          "content": "import { createSelector } from 'reselect'\nexport const ${1:selectorName} = state => state.${2:selector}",
          "name": "reduxSelector",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rxselect"
        },
        {
          "content": "import { createSlice } from '@reduxjs/toolkit'\nconst initialState = {}\nconst ${1:$TM_FILENAME_BASE} = createSlice({\n\tname: ${2:sliceName},\n\tinitialState,\n\treducers: {\n\n\t\t}});\nexport const {} = ${1:$TM_FILENAME_BASE}.actions\nexport default ${1:$TM_FILENAME_BASE}.reducer",
          "name": "reduxSlice",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rxslice"
        },
        {
          "content": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\nexport default class ${1:$TM_FILENAME_BASE} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}}",
          "name": "reactNativeComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnc"
        },
        {
          "content": "import React, { Component } from 'react'\nimport { Text, StyleSheet, View } from 'react-native'\nexport default class ${1:$TM_FILENAME_BASE} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}}\nconst styles = StyleSheet.create({})",
          "name": "reactNativeComponentWithStyles",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rncs"
        },
        {
          "content": "import React, { Component } from 'react'\nimport { Text, View } from 'react-native'\nexport class ${1:$TM_FILENAME_BASE} extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}}\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactNativeComponentExport",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnce"
        },
        {
          "content": "import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\nexport default class ${1:$TM_FILENAME_BASE} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}}",
          "name": "reactNativePureComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnpc"
        },
        {
          "content": "import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\nexport class ${1:$TM_FILENAME_BASE} extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}}\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactNativePureComponentExport",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnpce"
        },
        {
          "content": "import React, { Component } from 'react'\nimport { View, Text } from 'react-native'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nexport class ${1:$TM_FILENAME_BASE} extends Component {\n\tstatic propTypes = {\n\t\t${2:prop}: ${3:PropTypes}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<Text> ${2:textInComponent} </Text>\n\t\t\t</View>\n\t\t)\n\t}}\nconst mapStateToProps = (state) => ({\n\t})\nconst mapDispatchToProps = {\t}\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})",
          "name": "reactNativeClassComponentRedux",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rncredux"
        },
        {
          "content": "import React from 'react'\nimport { View, Text } from 'react-native'\nconst ${1:$TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)}\nexport default ${1:$TM_FILENAME_BASE}",
          "name": "reactNativeFunctionalExportComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnfe"
        },
        {
          "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nconst ${1:$TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)}\nexport default ${1:$TM_FILENAME_BASE}\nconst styles = StyleSheet.create({})",
          "name": "reactNativeFunctionalExportComponentWithStyles",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnfes"
        },
        {
          "content": "import React from 'react'\nimport { View, Text } from 'react-native'\nexport default function ${1:$TM_FILENAME_BASE}}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)}",
          "name": "reactNativeFunctionalComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnf"
        },
        {
          "content": "import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nexport default function ${1:$TM_FILENAME_BASE}() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>$0</Text>\n\t\t</View>\n\t)}\nconst styles = StyleSheet.create({})",
          "name": "reactNativeFunctionalComponentWithStyles",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnfs"
        },
        {
          "content": "import { ${1:moduleName} } from 'react-native'",
          "name": "reactNativeImport",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "imrn"
        },
        {
          "content": "const styles = StyleSheet.create({\n\t$1:style\n})",
          "name": "reactNativeStyles",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "rnstyle"
        },
        {
          "content": "PropTypes.array,",
          "name": "propTypeArray",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pta"
        },
        {
          "content": "PropTypes.array.isRequired,",
          "name": "propTypeArrayRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptar"
        },
        {
          "content": "PropTypes.bool,",
          "name": "propTypeBool",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptb"
        },
        {
          "content": "PropTypes.bool.isRequired,",
          "name": "propTypeBoolRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptbr"
        },
        {
          "content": "PropTypes.func,",
          "name": "propTypeFunc",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptf"
        },
        {
          "content": "PropTypes.func.isRequired,",
          "name": "propTypeFuncRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptfr"
        },
        {
          "content": "PropTypes.number,",
          "name": "propTypeNumber",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptn"
        },
        {
          "content": "PropTypes.number.isRequired,",
          "name": "propTypeNumberRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptnr"
        },
        {
          "content": "PropTypes.object,",
          "name": "propTypeObject",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pto"
        },
        {
          "content": "PropTypes.object.isRequired,",
          "name": "propTypeObjectRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptor"
        },
        {
          "content": "PropTypes.string,",
          "name": "propTypeString",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pts"
        },
        {
          "content": "PropTypes.string.isRequired,",
          "name": "propTypeStringRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptsr"
        },
        {
          "content": "PropTypes.node,",
          "name": "propTypeNode",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptnd"
        },
        {
          "content": "PropTypes.node.isRequired,",
          "name": "propTypeNodeRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptndr"
        },
        {
          "content": "PropTypes.element,",
          "name": "propTypeElement",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptel"
        },
        {
          "content": "PropTypes.element.isRequired,",
          "name": "propTypeElementRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptelr"
        },
        {
          "content": "PropTypes.instanceOf($0),",
          "name": "propTypeInstanceOf",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pti"
        },
        {
          "content": "PropTypes.instanceOf($0).isRequired,",
          "name": "propTypeInstanceOfRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptir"
        },
        {
          "content": "PropTypes.oneOf(['$0']),",
          "name": "propTypeEnum",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pte"
        },
        {
          "content": "PropTypes.oneOf(['$0']).isRequired,",
          "name": "propTypeEnumRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "pter"
        },
        {
          "content": "PropTypes.oneOfType([\n\t$0\n]),",
          "name": "propTypeOneOfType",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptet"
        },
        {
          "content": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
          "name": "propTypeOneOfTypeRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptetr"
        },
        {
          "content": "PropTypes.arrayOf($0),",
          "name": "propTypeArrayOf",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptao"
        },
        {
          "content": "PropTypes.arrayOf($0).isRequired,",
          "name": "propTypeArrayOfRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptaor"
        },
        {
          "content": "PropTypes.objectOf($0),",
          "name": "propTypeObjectOf",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptoo"
        },
        {
          "content": "PropTypes.objectOf($0).isRequired,",
          "name": "propTypeObjectOfRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptoor"
        },
        {
          "content": "PropTypes.shape({\n\t$0\n}),",
          "name": "propTypeShape",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptsh"
        },
        {
          "content": "PropTypes.shape({\n\t$0\n}).isRequired,",
          "name": "propTypeShapeRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptshr"
        },
        {
          "content": "PropTypes.exact({\n\t$0\n}),",
          "name": "propTypeExact",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptex"
        },
        {
          "content": "PropTypes.exact({\n\t$0\n}).isRequired,",
          "name": "propTypeExactRequired",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptexr"
        },
        {
          "content": "static propTypes = {$0}",
          "name": "staticPropTpyes",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptypes"
        },
        {
          "content": "PropTypes.any,",
          "name": "propTypeAny",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "ptany"
        },
        {
          "content": "/**\n * ${0}\n */",
          "name": "Comment Big Block",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "cmmb"
        },
        {
          "content": "describe('$1', () => {\n\t$0\n})",
          "name": "describeBlock",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "desc"
        },
        {
          "content": "test('should $1', () => {\n\t$0\n})",
          "name": "testBlock",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "test"
        },
        {
          "content": "test('should $1', async () => {\n\t$0\n})",
          "name": "testAsyncBlock",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "testa"
        },
        {
          "content": "it('should $1', () => {\n\t$0\n})",
          "name": "itBlock",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "tit"
        },
        {
          "content": "it('should $1', async () => {\n\t$0\n})",
          "name": "itAsyncBlock",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "tita"
        },
        {
          "content": "import React from 'react'\nimport renderer from 'react-test-renderer'\nimport { ${1:$TM_FILENAME_BASE} } from '../${1:$TM_FILENAME_BASE}'\n\ndescribe('<${1:$TM_FILENAME_BASE} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:$TM_FILENAME_BASE} {...defaultProps} />)\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t}\n)})",
          "name": "setupReactTest",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "stest"
        },
        {
          "content": "import 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport ${1:${TM_FILENAME_BASE} from '../${1:${TM_FILENAME_BASE}'\n\ndescribe('<${1:${TM_FILENAME_BASE} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(<${1:$TM_FILENAME_BASE} {...defaultProps} />)\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t}\n)})",
          "name": "setupReactNativeTest",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "sntest"
        },
        {
          "content": "import React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\nimport store from 'src/store'\nimport { ${1:$TM_FILENAME_BASE} } from '../${1:$TM_FILENAME_BASE}'\ndescribe('<${1:$TM_FILENAME_BASE} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t <${1:$TM_FILENAME_BASE} {...defaultProps} />\n\t\t</Provider>,\t)\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t}\n)})",
          "name": "setupReactComponentTestWithRedux",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "srtest"
        },
        {
          "content": "import 'react-native'\nimport React from 'react'\nimport renderer from 'react-test-renderer'\nimport { Provider } from 'react-redux'\nimport store from 'src/store'\nimport { ${1:$TM_FILENAME_BASE} } from '../${1:$TM_FILENAME_BASE}'\ndescribe('<${1:$TM_FILENAME_BASE} />', () => {\n\tconst defaultProps = {}\n\tconst wrapper = renderer.create(\n\t\t<Provider store={store}>\n\t\t\t <${1:$TM_FILENAME_BASE} {...defaultProps} />\n\t\t</Provider>,\n\t)\n\n\ttest('render', () => {\n\t\texpect(wrapper).toMatchSnapshot()\n\t}\n)})",
          "name": "setupReactNativeTestWithRedux",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "snrtest"
        },
        {
          "content": "import { compose, graphql } from 'react-apollo'",
          "name": "graphQLForComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "graphql"
        },
        {
          "content": "export default compose(\n\tgraphql(${1:queryOrMutation}, { name: ${2:name} }),\n)(${1:$TM_FILENAME_BASE})",
          "name": "exportGraphQL",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "expgql"
        },
        {
          "content": "import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nexport const mapStateToProps = state => ({\n\n})\n\nexport const mapDispatchToProps = {\n\n}\n\nexport const ${1:hocComponentName} = (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}\n\nexport default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
          "name": "hocComponentWithRedux",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "hocredux"
        },
        {
          "content": "import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default (WrappedComponent) => {\n\tconst hocComponent = ({ ...props }) => <WrappedComponent {...props} />\n\n\thocComponent.propTypes = {\n\t}\n\n\treturn hocComponent\n}",
          "name": "hocComponent",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "hoc"
        },
        {
          "content": "const [${1:state}, set${1/(.*)/${1:}] = useState(${2:initialState})",
          "name": "useState",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useState"
        },
        {
          "content": "useEffect(() => {\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t}\n}, [${3:input}])",
          "name": "useEffect",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useEffect"
        },
        {
          "content": "const ${1:context} = useContext(${2:contextValue})",
          "name": "useContext",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useContext"
        },
        {
          "content": "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})",
          "name": "useReducer",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useReducer"
        },
        {
          "content": "useCallback(\n\t() => {\n\t\t${1:callback}\n\t},\n\t[${2:input}],\n)",
          "name": "useCallback",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useCallback"
        },
        {
          "content": "useMemo(() => ${1:function}, ${2:input})",
          "name": "useMemo",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useMemo"
        },
        {
          "content": "const ${1:ref} = useRef(${2:initialValue})",
          "name": "useRef",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useRef"
        },
        {
          "content": "useImperativeHandle(\n\t${1:ref},\n\t() => {\n\t\t${2:handler}\n\t},\n\t[${3:input}],\n)",
          "name": "useImperativeHandle",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useImperativeHandle"
        },
        {
          "content": "useDebugValue(${1:value})",
          "name": "useDebugValue",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useDebugValue"
        },
        {
          "content": "useLayoutEffect(() => {\n\t${1:effect}\n\treturn () => {\n\t\t${2:cleanup}\n\t};\n}, [${3:input}])",
          "name": "useLayoutEffect",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useLayoutEffect"
        },
        {
          "content": "const ${1:state} = useSelector(state => state.${1:state})",
          "name": "useSelector",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useSelector"
        },
        {
          "content": "const dispatch = useDispatch(${1:function})",
          "name": "useDispatch",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "useDispatch"
        },
        {
          "content": "typeof ${0}",
          "name": "typeof",
          "scope": "editor",
          "syntax": ["jsx", "javascript"],
          "trigger": "tpf"
        }
      ]
    }
  ]
}
